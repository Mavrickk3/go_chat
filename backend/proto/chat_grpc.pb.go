// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: backend/proto/chat.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageStoreClient is the client API for MessageStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageStoreClient interface {
	StoreMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RetrieveMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Messages, error)
}

type messageStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageStoreClient(cc grpc.ClientConnInterface) MessageStoreClient {
	return &messageStoreClient{cc}
}

func (c *messageStoreClient) StoreMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chat.MessageStore/StoreMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageStoreClient) RetrieveMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/chat.MessageStore/RetrieveMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageStoreServer is the server API for MessageStore service.
// All implementations must embed UnimplementedMessageStoreServer
// for forward compatibility
type MessageStoreServer interface {
	StoreMessage(context.Context, *Message) (*emptypb.Empty, error)
	RetrieveMessages(context.Context, *emptypb.Empty) (*Messages, error)
	mustEmbedUnimplementedMessageStoreServer()
}

// UnimplementedMessageStoreServer must be embedded to have forward compatible implementations.
type UnimplementedMessageStoreServer struct {
}

func (UnimplementedMessageStoreServer) StoreMessage(context.Context, *Message) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreMessage not implemented")
}
func (UnimplementedMessageStoreServer) RetrieveMessages(context.Context, *emptypb.Empty) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMessages not implemented")
}
func (UnimplementedMessageStoreServer) mustEmbedUnimplementedMessageStoreServer() {}

// UnsafeMessageStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageStoreServer will
// result in compilation errors.
type UnsafeMessageStoreServer interface {
	mustEmbedUnimplementedMessageStoreServer()
}

func RegisterMessageStoreServer(s grpc.ServiceRegistrar, srv MessageStoreServer) {
	s.RegisterService(&MessageStore_ServiceDesc, srv)
}

func _MessageStore_StoreMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageStoreServer).StoreMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.MessageStore/StoreMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageStoreServer).StoreMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageStore_RetrieveMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageStoreServer).RetrieveMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.MessageStore/RetrieveMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageStoreServer).RetrieveMessages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageStore_ServiceDesc is the grpc.ServiceDesc for MessageStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.MessageStore",
	HandlerType: (*MessageStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreMessage",
			Handler:    _MessageStore_StoreMessage_Handler,
		},
		{
			MethodName: "RetrieveMessages",
			Handler:    _MessageStore_RetrieveMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/proto/chat.proto",
}
